/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import entity.*;
import java.awt.Container;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BoxLayout;
import util.DBConnection;

/**
 *
 * @author aluno
 */
public class NotificationsScreen extends javax.swing.JPanel {

    private UserProfile user;
    private ArrayList<Notification> notifications;

    /**
     * Creates new form NotificationsPanel
     */
    public NotificationsScreen(UserProfile user) {
        initComponents();
        this.user = user;
        updatePostTab();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        jButton1.setText("Tag Post");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Tag Comment");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("New Followers");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       updatePostTab();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        updateCommentTab();
    }//GEN-LAST:event_jButton2ActionPerformed

    public void updatePostTab() {
        try {
            Connection con = DBConnection.getConnection();
            PreparedStatement stmt = con.prepareStatement("SELECT * from tagpostuser WHERE tagpostuser.taguser = '" + this.user.getName() + "'order by pdate desc;");
            ResultSet result = stmt.executeQuery();

            Container cont = new Container();
            cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
            while (result.next()) {
                PreparedStatement stmt2 = con.prepareStatement("Select * from userprofile where login = '" + result.getString("pauthor") + "';");
                ResultSet resultAuthor = stmt2.executeQuery();
                resultAuthor.next();
                UserProfile author = new UserProfile(resultAuthor.getString("realname"), resultAuthor.getString("login"), resultAuthor.getString("bio"),
                        resultAuthor.getBoolean("visibility"), resultAuthor.getInt("nfollowers"), resultAuthor.getInt("nfollowing"), resultAuthor.getString("lasttime"));
                NotificationTagPost not = new NotificationTagPost(author, result.getString("pdate"), result.getString("taguser"));

                cont.add(new Notification(not));
            }
            cont.revalidate();
            scrollPane.getViewport().setView(cont);

        } catch (SQLException ex) {
            Logger.getLogger(TimeLineScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void updateCommentTab() {
        try {
            Connection con = DBConnection.getConnection();

            PreparedStatement stmt = con.prepareStatement("SELECT * from tagcommntuser WHERE taguser = '" + this.user.getName() + "'order by cdate desc;");
            ResultSet result = stmt.executeQuery();

            Container cont = new Container();
            cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
            while (result.next()) {

                PreparedStatement stmt2 = con.prepareStatement("Select * from userprofile where login = '" + result.getString("cauthor") + "';");
                ResultSet resultAuthor = stmt2.executeQuery();
                resultAuthor.next();
                UserProfile commntAuthor = new UserProfile(resultAuthor.getString("realname"), resultAuthor.getString("login"), resultAuthor.getString("bio"),
                        resultAuthor.getBoolean("visibility"), resultAuthor.getInt("nfollowers"), resultAuthor.getInt("nfollowing"), resultAuthor.getString("lasttime"));

                resultAuthor.close();
                stmt2 = con.prepareStatement("Select * from userprofile where login = '" + result.getString("pauthor") + "';");
                resultAuthor = stmt2.executeQuery();
                UserProfile postAuthor = new UserProfile(resultAuthor.getString("realname"), resultAuthor.getString("login"), resultAuthor.getString("bio"),
                        resultAuthor.getBoolean("visibility"), resultAuthor.getInt("nfollowers"), resultAuthor.getInt("nfollowing"), resultAuthor.getString("lasttime"));

                NotificationTagCommnt not = new NotificationTagCommnt(postAuthor, result.getString("cpdate"), commntAuthor, result.getString("cdate"), result.getString("taguser"));

                cont.add(new Notification1(not));
            }
            cont.revalidate();
            scrollPane.getViewport().setView(cont);

        } catch (SQLException ex) {
            Logger.getLogger(TimeLineScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables
}
